%noselect {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

%clearfix {
    &:after {
        content: "";
        display: table;
        clear: both;
    }
}

// MEDIA QUERIES FOR RESPONSIVE DESIGN
@mixin media-query($device) {
    @media screen and (max-width: $device) {
        @content;
    }
}

// BOX SIZING
@mixin box-sizing($box) {
    @include prefixer(box-sizing, $box, webkit ms moz spec);
}

// APPEARANCE
@mixin appearance($appearance) {
    appearance: $appearance;
    -moz-appearance: $appearance;
    -webkit-appearance: $appearance;
}

// BOX SHADOW

@mixin box-shadow($left, $top, $blur, $color, $inset: false) {
    @if $inset {
        -webkit-box-shadow: inset $left $top $blur $color;
        -moz-box-shadow: inset $left $top $blur $color;
        box-shadow: inset $left $top $blur $color;
    } @else {
        -webkit-box-shadow: $left $top $blur $color;
        -moz-box-shadow: $left $top $blur $color;
        box-shadow: $left $top $blur $color;
    }
}

// FLEXBOX
@mixin flexbox() {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}
@mixin flex($values) {
  -webkit-box-flex: $values;
     -moz-box-flex: $values;
      -webkit-flex: $values;
          -ms-flex: $values;
              flex: $values;
}
@mixin align-content($value: stretch) {
    // No Webkit Box Fallback.
    -webkit-align-content: $value;
       -moz-align-content: $value;
            align-content: $value;
    @if $value == flex-start {
        -ms-flex-line-pack: start;
    } @else if $value == flex-end {
        -ms-flex-line-pack: end;
    } @else {
        -ms-flex-line-pack: $value;
    }
}
@mixin align-items($value: stretch) {
    -webkit-align-items: $value;
       -moz-align-items: $value;
            align-items: $value;
    @if $value == flex-start {
        -webkit-box-align: start;
        -ms-flex-align: start;
    } @else if $value == flex-end {
        -webkit-box-align: end;
        -ms-flex-align: end;
    } @else {
        -webkit-box-align: $value;
        -ms-flex-align: $value;
    }
}
@mixin align-self($value: auto) {
    // No Webkit Box Fallback.
    -webkit-align-self: $value;
       -moz-align-self: $value;
            align-self: $value;
    @if $value == flex-start {
        -ms-flex-item-align: start;
    } @else if $value == flex-end {
        -ms-flex-item-align: end;
    } @else {
        -ms-flex-item-align: $value;
    }
}
// Shorthand for flex-direction and flex-wrap
@mixin flex-flow($values: (row nowrap)) {
  // No Webkit Box fallback.
  -webkit-flex-flow: $values;
     -moz-flex-flow: $values;
      -ms-flex-flow: $values;
          flex-flow: $values;
}
@mixin justify-content($value: flex-start) {
    -webkit-justify-content: $value;
       -moz-justify-content: $value;
            justify-content: $value;
    @if $value == flex-start {
        -webkit-box-pack: start;
        -ms-flex-pack: start;
    } @else if $value == flex-end {
        -webkit-box-pack: end;
        -ms-flex-pack: end;
    } @else if $value == space-between {
        -webkit-box-pack: justify;
        -ms-flex-pack: justify;
    } @else if $value == space-around {
        -ms-flex-pack: distribute;    
    } @else {
        -webkit-box-pack: $value;
        -ms-flex-pack: $value;
    }
}
// Shorter version:
@mixin flex-just($args...) {
    @include justify-content($args...);
}
@mixin order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
              -webkit-order: $int;
                 -moz-order: $int;
             -ms-flex-order: $int;
                      order: $int;
}

// TRANSFORMS
// TODO Upgrade to support multiple transforms
@mixin transform($effect) {
     -moz-transform: $effect;
       -o-transform: $effect;
      -ms-transform: $effect;
  -webkit-transform: $effect;
          transform: $effect;
}
@mixin rotate($deg) {
    @include transform(rotate(#{$deg}deg));
}
@mixin rotateY($deg) {
    @include transform(rotateY(#{$deg}deg));
}
@mixin rotateX($deg) {
    @include transform(rotateX(#{$deg}deg));
}
@mixin rotateZ($deg) {
    @include transform(rotateZ(#{$deg}deg));
}
@mixin scale($scale) {
    @include transform(scale($scale));
}
@mixin translate($x, $y) {
    @include transform(translate($x, $y));
}
@mixin skew($x, $y) {
    @include transform(skew(#{$x}deg, #{$y}deg));
}

@mixin transform-origin($origin) {
      moz-transform-origin: $origin;
       -o-transform-origin: $origin;
      -ms-transform-origin: $origin;
  -webkit-transform-origin: $origin;
          transform-origin: $origin;
}


// PERSPECTIVE
@mixin perspective($val) {
    -webkit-perspective: $val; 
    -moz-perspective: $val; 
    -ms-perspective: $val; 
    perspective: $val;
}
@mixin perspective-origin($val){
    -webkit-perspective-origin: $val;
    -moz-perspective-origin: $val;
    -ms-perspective-origin: $val;
    perspective-origin: $val;
}

// FILTERS
// https://dvcs.w3.org/hg/FXTF/raw-file/tip/filters/index.html 
// Options:
// grayscale      ex: filter: grayscale(100%);
// sepia          ex: filter: sepia(100%);
// saturate       ex: filter: saturate(0%);
// hue-rotate     ex: filter: hue-rotate(45deg);
// invert         ex: filter: invert(100%);
// brightness     ex: filter: brightness(15%);
// contrast       ex: filter: contrast(200%);
// blur           ex: filter: blur(2px);
@mixin filter($filter-type,$filter-amount) { 
    -webkit-filter: $filter-type+unquote('(#{$filter-amount})');
    -moz-filter: $filter-type+unquote('(#{$filter-amount})');
    -ms-filter: $filter-type+unquote('(#{$filter-amount})');
    -o-filter: $filter-type+unquote('(#{$filter-amount})');
    filter: $filter-type+unquote('(#{$filter-amount})');
}

// ANIMATIONS
@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }  
    @-ms-keyframes #{$animation-name} {
        @content;
    }
    @-o-keyframes #{$animation-name} {
        @content;
    }  
    @keyframes #{$animation-name} {
        @content;
    }
}
@mixin animation($str) {
    -webkit-animation: #{$str};
    -moz-animation: #{$str};
    -ms-animation: #{$str};
    -o-animation: #{$str};
    animation: #{$str};
}


// TRANSITIONS
@mixin transition($target, $time){
  -webkit-transition: $target $time cubic-bezier(0.680, 0, 0.265, 1); /* older webkit */
  -webkit-transition: $target $time cubic-bezier(0.680, -0.550, 0.265, 1.550); 
     -moz-transition: $target $time cubic-bezier(0.680, -0.550, 0.265, 1.550); 
       -o-transition: $target $time cubic-bezier(0.680, -0.550, 0.265, 1.550); 
          transition: $target $time cubic-bezier(0.680, -0.550, 0.265, 1.550);
}
@mixin transitionEase($target, $time){
  -webkit-transition: $target $time ease-in-out; 
     -moz-transition: $target $time ease-in-out; 
       -o-transition: $target $time ease-in-out; 
          transition: $target $time ease-in-out;
}

// INPUT PLACEHOLDER
@mixin placeholder {
    ::-webkit-input-placeholder {@content}
    :-moz-placeholder           {@content}
    ::-moz-placeholder          {@content}
    :-ms-input-placeholder      {@content}
}